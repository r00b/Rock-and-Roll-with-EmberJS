{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","rarwe/tests/acceptance/bands-test.js","rarwe/tests/app.lint-test.js","rarwe/tests/helpers/asserts.js","rarwe/tests/helpers/async-helpers.js","rarwe/tests/helpers/destroy-app.js","rarwe/tests/helpers/http-stubs.js","rarwe/tests/helpers/module-for-acceptance.js","rarwe/tests/helpers/resolver.js","rarwe/tests/helpers/start-app.js","rarwe/tests/integration/components/star-rating-test.js","rarwe/tests/test-helper.js","rarwe/tests/tests.lint-test.js","rarwe/tests/unit/controllers/bands/band/songs-test.js","rarwe/tests/unit/helpers/capitalize-test.js","rarwe/tests/unit/routes/bands/band-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('rarwe/tests/acceptance/bands-test', ['exports', 'qunit', 'rarwe/tests/helpers/module-for-acceptance', 'pretender', 'rarwe/tests/helpers/http-stubs'], function (exports, _qunit, _rarweTestsHelpersModuleForAcceptance, _pretender, _rarweTestsHelpersHttpStubs) {\n\n  (0, _rarweTestsHelpersModuleForAcceptance['default'])('Acceptance | bands', {\n    afterEach: function afterEach() {\n      server.shutdown();\n    }\n  });\n\n  var server;\n\n  (0, _qunit.test)('List bands', function (assert) {\n    server = new _pretender['default'](function () {\n      _rarweTestsHelpersHttpStubs['default'].stubBands(this, [{\n        id: 1,\n        type: 'bands',\n        attributes: {\n          name: 'Radiohead'\n        }\n      }, {\n        id: 2,\n        type: 'bands',\n        attributes: {\n          name: 'Long Distance Calling'\n        }\n      }]);\n      // this.get('/bands', function() {\n      //   var response = {\n      //     data: [\n      //       {\n      //         id: 1,\n      //         type: 'bands',\n      //         attributes: {\n      //           name: 'Radiohead'\n      //         }\n      //       },\n      //       {\n      //         id: 2,\n      //         type: 'bands',\n      //         attributes: {\n      //           name: 'Long Distance Calling'\n      //         }\n      //       },\n      //     ]\n      //   };\n      //   return [200, { 'Content-Type': 'application/vnd.api+json' },\n      //   JSON.stringify(response)];\n      // });\n    });\n\n    visit('/bands');\n\n    andThen(function () {\n      assertLength(assert, '.band-link', 2, 'All band links are rendered');\n      assertLength(assert, '.band-link:contains(\"Radiohead\")', 1, 'First band link contains the band name');\n      assertLength(assert, '.band-link:contains(\"Long Distance Calling\")', 1, 'The other band link contains the band name');\n    });\n  });\n\n  (0, _qunit.test)('Create a new band', function (assert) {\n    server = new _pretender['default'](function () {\n      _rarweTestsHelpersHttpStubs['default'].stubBands(this, [{\n        id: 1,\n        attributes: {\n          name: 'Radiohead'\n        }\n      }]);\n      _rarweTestsHelpersHttpStubs['default'].stubCreateBand(this, 2);\n      _rarweTestsHelpersHttpStubs['default'].stubSongs(this, 2, []);\n    });\n\n    visit('/bands');\n    fillIn('.new-band', 'Long Distance Calling');\n    click('.new-band-button');\n\n    andThen(function () {\n      assertLength(assert, '.band-link', 2, 'All band links are rendered');\n      assertTrimmedText(assert, '.band-link:last', 'Long Distance Calling', 'Created band appears at the end of the list');\n      assertElement(assert, '.nav a.active:contains(\"Songs\")', 'The Songs tab is active');\n    });\n  });\n\n  (0, _qunit.test)('Create a new song in two steps', function (assert) {\n    server = new _pretender['default'](function () {\n      _rarweTestsHelpersHttpStubs['default'].stubBands(this, [{\n        id: 1,\n        type: 'bands',\n        attributes: {\n          name: 'Radiohead'\n        }\n      }]);\n      // this.get('/bands', function() {\n      //   var response = {\n      //     data: [\n      //       {\n      //         id: 1,\n      //         type: 'bands',\n      //         attributes: {\n      //           name: 'Radiohead'\n      //         }\n      //       }\n      //     ]\n      //   };\n      //   return [200, { 'Content-Type': 'application/vnd.api+json' },\n      //   JSON.stringify(response)];\n      // });\n      //\n      // this.get('/bands/1', function() {\n      //   var response = {\n      //     data: {\n      //       id: 1,\n      //       type: 'bands',\n      //       attributes: {\n      //         name: 'Radiohead'\n      //       }\n      //     }\n      //   };\n      //   return [200, { 'Content-Type': 'application/vnd.api+json' },\n      //   JSON.stringify(response)];\n      // });\n\n      // httpStubs.stubCreateSong(this,1);\n      // httpStubs.stubSongs(this, 1, [\n      //   {\n      //     id: 1,\n      //     type: 'songs',\n      //     attributes: {\n      //       name: 'Killer Cars'\n      //     }\n      //   }\n      // ]);\n\n      this.post('/songs', function () {\n        var response = {\n          data: {\n            id: 1,\n            type: 'songs',\n            attributes: {\n              name: 'Killer Cars'\n            }\n          }\n        };\n        return [200, { 'Content-Type': 'application/vnd.api+json' }, JSON.stringify(response)];\n      });\n\n      this.get('/bands/1/songs', function () {\n        return [200, { 'Content-Type': 'application/vnd.api+json' }, JSON.stringify({ data: [] })];\n      });\n    });\n\n    selectBand('Radiohead');\n    click('a:contains(\"create one\")');\n    fillIn('.new-song', 'Killer Cars');\n    submit('.new-song-form');\n\n    andThen(function () {\n      assertElement(assert, '.songs .song:contains(\"Killer Cars\")', 'Creates the song and displays it in the list');\n    });\n  });\n\n  (0, _qunit.test)('Sort songs in various ways', function (assert) {\n    server = new _pretender['default'](function () {\n      _rarweTestsHelpersHttpStubs['default'].stubBands(this, [{\n        id: 1,\n        attributes: {\n          name: 'Them Crooked Vultures'\n        }\n      }]);\n      _rarweTestsHelpersHttpStubs['default'].stubSongs(this, 1, [{\n        id: 1,\n        attributes: {\n          title: 'Elephants',\n          rating: 5\n        }\n      }, {\n        id: 2,\n        attributes: {\n          title: 'New Fang',\n          rating: 4\n        }\n      }, {\n        id: 3,\n        attributes: {\n          title: 'Mind Eraser, No Chaser',\n          rating: 4\n        }\n      }, {\n        id: 4,\n        attributes: {\n          title: 'Spinning in Daffodils',\n          rating: 5\n        }\n      }]);\n    });\n\n    selectBand('Them Crooked Vultures');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/bands/1/songs');\n      assertTrimmedText(assert, '.song:first', 'Elephants', 'The first song is the highest ranked, first in the alphabet');\n      assertTrimmedText(assert, '.song:last', 'New Fang', 'The last song is the lowest ranked, last in the alphabet');\n    });\n\n    click('button.sort-title-desc');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/bands/1/songs?sort=titleDesc');\n      assertTrimmedText(assert, '.song:first', 'Spinning In Daffodils', 'The first song is the one that is the last in the alphabet');\n      assertTrimmedText(assert, '.song:last', 'Elephants', 'The last song is the one that is the first in the alphabet');\n    });\n\n    click('button.sort-rating-asc');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/bands/1/songs?sort=ratingAsc');\n      assertTrimmedText(assert, '.song:first', 'Mind Eraser, No Chaser', 'The first song is the lowest ranked, first in the alphabet');\n      assertTrimmedText(assert, '.song:last', 'Spinning In Daffodils', 'The last song is the highest ranked, last in the alphabet');\n    });\n  });\n\n  (0, _qunit.test)('Search songs', function (assert) {\n    server = new _pretender['default'](function () {\n      _rarweTestsHelpersHttpStubs['default'].stubBands(this, [{\n        id: 1,\n        attributes: {\n          name: 'Them Crooked Vultures'\n        }\n      }]);\n\n      _rarweTestsHelpersHttpStubs['default'].stubSongs(this, 1, [{\n        id: 1,\n        attributes: {\n          title: 'Elephants',\n          rating: 5\n        }\n      }, {\n        id: 2,\n        attributes: {\n          title: 'New Fang',\n          rating: 4\n        }\n      }, {\n        id: 3,\n        attributes: {\n          title: 'Mind Eraser, No Chaser',\n          rating: 4\n        }\n      }, {\n        id: 4,\n        attributes: {\n          title: 'Spinning in Daffodils',\n          rating: 5\n        }\n      }, {\n        id: 5,\n        attributes: {\n          title: 'No One Loves Me & Neither Do I',\n          rating: 5\n        }\n      }]);\n    });\n\n    visit('/bands/1');\n    fillIn('.search-field', 'no');\n    andThen(function () {\n      assertLength(assert, '.song', 2, 'The songs matching the search term are displayed');\n    });\n    click('button.sort-title-desc');\n    andThen(function () {\n      assertTrimmedText(assert, '.song:first', 'No One Loves Me & Neither Do I', 'A matching song that comes later in the alphabet appears on top');\n      assertTrimmedText(assert, '.song:last', 'Mind Eraser, No Chaser', 'A matching song that comes sooner in the alphabet appears at the bottom ');\n    });\n  });\n});","define('rarwe/tests/app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/star-rating.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/star-rating.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/bands.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/bands.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/bands/band/details.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/bands/band/details.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/bands/band/songs.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/bands/band/songs.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/capitalize.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/capitalize.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/band.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/band.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/song.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/song.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/bands.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/bands.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/bands/band.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/bands/band.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/bands/band/details.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/bands/band/details.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/bands/band/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/bands/band/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/bands/band/songs.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/bands/band/songs.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('transitions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transitions.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('transitions/slight-scale.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transitions/slight-scale.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('utils/wait.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/wait.js should pass ESLint\\n\\n');\n  });\n});","define('rarwe/tests/helpers/asserts', ['exports', 'ember'], function (exports, _ember) {\n\n  function assertTrimmedText(app, assert, selector, text, errorMessage) {\n    var element = findWithAssert(selector);\n    var elementText = element.text().trim();\n    assert.equal(elementText, text, errorMessage);\n  }\n\n  function assertLength(app, assert, selector, length, errorMessage) {\n    assert.equal(find(selector).length, length, errorMessage);\n  }\n\n  function assertElement(app, assert, selector, errorMessage) {\n    assert.equal(find(selector).length, 1, errorMessage);\n  }\n\n  _ember['default'].Test.registerHelper('assertTrimmedText', assertTrimmedText);\n  _ember['default'].Test.registerHelper('assertLength', assertLength);\n  _ember['default'].Test.registerHelper('assertElement', assertElement);\n});","define('rarwe/tests/helpers/async-helpers', ['exports', 'ember'], function (exports, _ember) {\n\n  function selectBand(app, name) {\n    visit('/').click('.band-link:contains(\"' + name + '\")');\n    return app.testHelpers.wait();\n  }\n\n  function submit(app, selector) {\n    return triggerEvent(selector, 'submit');\n  }\n\n  _ember['default'].Test.registerAsyncHelper('selectBand', selectBand);\n  _ember['default'].Test.registerAsyncHelper('submit', submit);\n});","define('rarwe/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('rarwe/tests/helpers/http-stubs', ['exports'], function (exports) {\n  function songsUrlForBand(id) {\n    return '/bands/' + id + '/songs';\n  }\n\n  function responseItemForBand(data, id) {\n    var bandId = id || data.id;\n    return {\n      id: bandId,\n      type: 'bands',\n      attributes: data.attributes,\n      relationships: {\n        songs: {\n          links: {\n            related: songsUrlForBand(bandId)\n          }\n        }\n      }\n    };\n  }\n\n  function responseItemForSong(data, id) {\n    var songId = id || data.id;\n    return {\n      id: songId,\n      type: \"songs\",\n      attributes: data.attributes\n    };\n  }\n\n  exports['default'] = {\n    stubBands: function stubBands(pretender, data) {\n      var responseForBands = [];\n      data.forEach(function (band) {\n        var responseForBand = responseItemForBand(band);\n        pretender.get('/bands/' + responseForBand.id, function () {\n          return [200, { 'Content-Type': 'application/vnd.api+json' }, JSON.stringify({ data: responseForBand })];\n        });\n        responseForBands.push(responseForBand);\n      });\n      pretender.get('/bands', function () {\n        return [200, { 'Content-Type': 'application/vnd.api+json' }, JSON.stringify({ data: responseForBands })];\n      });\n    },\n\n    stubSongs: function stubSongs(pretender, bandId, data) {\n      var response = data.map(function (song) {\n        return responseItemForSong(song);\n      });\n      pretender.get(songsUrlForBand(bandId), function () {\n        return [200, { 'Content-Type': 'application/vnd.api+json' }, JSON.stringify({ data: response })];\n      });\n    },\n\n    stubCreateBand: function stubCreateBand(pretender, newId) {\n      pretender.post('/bands', function (request) {\n        var response = responseItemForBand(JSON.parse(request.requestBody).data, newId);\n        return [200, { 'Content-Type': 'application/vnd.api+json' }, JSON.stringify({ data: response })];\n      });\n    },\n\n    stubCreateSong: function stubCreateSong(pretender, newId) {\n      pretender.post('/songs', function (request) {\n        var response = responseItemForSong(JSON.parse(request.requestBody).data, newId);\n        return [200, { 'Content-Type': 'application/vnd.api+json' }, JSON.stringify({ data: response })];\n      });\n    }\n  };\n});","define('rarwe/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'rarwe/tests/helpers/start-app', 'rarwe/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _rarweTestsHelpersStartApp, _rarweTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _rarweTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _rarweTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('rarwe/tests/helpers/resolver', ['exports', 'rarwe/resolver', 'rarwe/config/environment'], function (exports, _rarweResolver, _rarweConfigEnvironment) {\n\n  var resolver = _rarweResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _rarweConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _rarweConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('rarwe/tests/helpers/start-app', ['exports', 'ember', 'rarwe/app', 'rarwe/config/environment', 'rarwe/tests/helpers/asserts', 'rarwe/tests/helpers/async-helpers'], function (exports, _ember, _rarweApp, _rarweConfigEnvironment, _rarweTestsHelpersAsserts, _rarweTestsHelpersAsyncHelpers) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var attributes = _ember['default'].merge({}, _rarweConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    return _ember['default'].run(function () {\n      var application = _rarweApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('rarwe/tests/integration/components/star-rating-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('star-rating', 'Integration | Component | star-rating', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('Renders the full and empty stars correctly', function (assert) {\n    assert.expect(6);\n\n    var song = _ember['default'].Object.create({ rating: 4 });\n    this.set('song', song);\n    this.set('maxRating', 5);\n\n    this.render(_ember['default'].HTMLBars.template({\n      'id': 'eebYrjqK',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"star-rating\"],null,[[\"item\",\"rating\",\"maxRating\"],[[\"get\",[\"song\"]],[\"get\",[\"song\",\"rating\"]],[\"get\",[\"maxRating\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$('.glyphicon-star').length, 4, 'The right amount of full stars is rendered');\n    assert.equal(this.$('.glyphicon-star-empty').length, 1, 'The right amount of empty stars is rendered');\n\n    this.set('maxRating', 10);\n\n    assert.equal(this.$('.glyphicon-star').length, 4, 'The right amount of full stars is rendered after changing maxRating');\n    assert.equal(this.$('.glyphicon-star-empty').length, 6, 'The right amount of empty stars is rendered after changing maxRating');\n\n    this.set('song.rating', 2);\n\n    assert.equal(this.$('.glyphicon-star').length, 2, 'The right amount of full stars is rendered after changing rating');\n    assert.equal(this.$('.glyphicon-star-empty').length, 8, 'The right amount of empty stars is rendered after changing rating');\n  });\n});","define('rarwe/tests/test-helper', ['exports', 'rarwe/tests/helpers/resolver', 'ember-qunit'], function (exports, _rarweTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_rarweTestsHelpersResolver['default']);\n});","define('rarwe/tests/tests.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('acceptance/bands-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/bands-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/asserts.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/asserts.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/async-helpers.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/async-helpers.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/http-stubs.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/http-stubs.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/star-rating-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/star-rating-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/bands/band/songs-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/bands/band/songs-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/capitalize-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/capitalize-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/bands/band-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/bands/band-test.js should pass ESLint\\n\\n');\n  });\n});","define('rarwe/tests/unit/controllers/bands/band/songs-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:bands/band/songs', 'Unit | Controller | bands/ band/songs', {});\n\n  (0, _emberQunit.test)('canCreateSong', function (assert) {\n    assert.expect(3);\n\n    var controller = this.subject();\n    var band = _ember['default'].Object.create();\n    controller.set('model', band);\n\n    controller.set('songCreationStarted', false);\n\n    assert.ok(!controller.get('canCreateSong'), \"Can't create song if process has not started and no songs yet\");\n\n    controller.set('songCreationStarted', true);\n\n    assert.ok(controller.get('canCreateSong'), 'Can create song if process has started');\n\n    controller.set('songCreationStarted', false);\n    var songs = [_ember['default'].Object.create({ id: 1, title: 'Elephants', rating: 5 })];\n\n    band.set('songs', songs);\n    assert.ok(controller.get('canCreateSong'), 'Can create song if process has not started but there are already songs');\n  });\n});","define('rarwe/tests/unit/helpers/capitalize-test', ['exports', 'rarwe/helpers/capitalize', 'qunit'], function (exports, _rarweHelpersCapitalize, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | capitalize');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _rarweHelpersCapitalize.capitalize)([42]);\n    assert.ok(result);\n  });\n});","define('rarwe/tests/unit/routes/bands/band-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:bands/band', 'Unit | Route | bands/band', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","require('rarwe/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingslGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;","file":"tests.js"}